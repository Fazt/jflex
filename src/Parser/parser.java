
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 30 16:38:13 CLT 2015
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ast.*;
import parser.sym;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 30 16:38:13 CLT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\005\010\000" +
    "\002\006\003\000\002\006\003\000\002\007\010\000\002" +
    "\010\003\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\004\000\002\012\006\000\002\013\006" +
    "\000\002\014\004\000\002\014\002\000\002\015\004\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\004\000\002\017\003\000\002\020\007\000\002\020\011" +
    "\000\002\021\003\000\002\021\003\000\002\022\007\000" +
    "\002\023\013\000\002\024\004\000\002\024\005\000\002" +
    "\025\005\000\002\025\003\000\002\026\003\000\002\026" +
    "\006\000\002\027\005\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\005\000\002" +
    "\031\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\005\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\035\005\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\005\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\040\006\000\002\041" +
    "\003\000\002\041\003\000\002\042\005\000\002\042\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\010\003\013\025\006\032\004\001\002\000" +
    "\004\043\ufff8\001\002\000\012\002\ufffe\003\ufffe\025\ufffe" +
    "\032\ufffe\001\002\000\004\043\ufff7\001\002\000\004\002" +
    "\173\001\002\000\012\002\000\003\013\025\006\032\004" +
    "\001\002\000\012\002\ufffc\003\ufffc\025\ufffc\032\ufffc\001" +
    "\002\000\004\043\015\001\002\000\012\002\ufffb\003\ufffb" +
    "\025\ufffb\032\ufffb\001\002\000\012\002\ufffd\003\ufffd\025" +
    "\ufffd\032\ufffd\001\002\000\010\012\020\015\016\017\017" +
    "\001\002\000\006\025\026\032\004\001\002\000\004\042" +
    "\021\001\002\000\014\002\ufffa\003\ufffa\025\ufffa\032\ufffa" +
    "\033\ufffa\001\002\000\004\020\022\001\002\000\004\012" +
    "\023\001\002\000\014\002\ufff9\003\ufff9\025\ufff9\032\ufff9" +
    "\033\ufff9\001\002\000\006\016\ufff5\023\170\001\002\000" +
    "\006\016\ufff2\023\ufff2\001\002\000\006\016\ufff4\043\ufff7" +
    "\001\002\000\004\043\165\001\002\000\004\016\031\001" +
    "\002\000\004\021\033\001\002\000\012\002\ufff6\003\ufff6" +
    "\025\ufff6\032\ufff6\001\002\000\010\025\uffed\032\uffed\033" +
    "\uffed\001\002\000\010\025\006\032\004\033\037\001\002" +
    "\000\026\012\045\015\061\021\033\022\054\024\051\027" +
    "\044\030\072\031\046\042\053\043\052\001\002\000\010" +
    "\025\uffee\032\uffee\033\uffee\001\002\000\026\012\uffeb\015" +
    "\uffeb\021\uffeb\022\uffeb\024\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\042\uffeb\043\uffeb\001\002\000\004\043\041\001\002\000" +
    "\006\012\020\017\017\001\002\000\030\012\uffe1\015\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\042\uffe1\043\uffe1\001\002\000\026\012\uffec\015\uffec" +
    "\021\uffec\022\uffec\024\uffec\027\uffec\030\uffec\031\uffec\042" +
    "\uffec\043\uffec\001\002\000\004\015\161\001\002\000\030" +
    "\012\uffe4\015\uffe4\021\uffe4\022\uffe4\024\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\042\uffe4\043\uffe4\001\002\000\012" +
    "\012\156\015\061\042\053\043\052\001\002\000\030\012" +
    "\uffe9\015\uffe9\021\uffe9\022\uffe9\024\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\042\uffe9\043\uffe9\001\002\000\042\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\016\uffc6\020\uffc6\023\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\001\002\000\004\015\150\001\002" +
    "\000\050\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\014\uffd9\015\135\016\uffd9\017\136\020\uffd9" +
    "\023\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\001\002\000\042\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\016\uffc0\020\uffc0\023\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\001\002" +
    "\000\040\002\uffef\003\uffef\012\uffef\015\uffef\021\uffef\022" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\042\uffef\043\uffef\001\002\000\030\012\uffe6\015" +
    "\uffe6\021\uffe6\022\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\042\uffe6\043\uffe6\001\002\000\004\012\134\001" +
    "\002\000\042\004\uffca\005\uffca\006\uffca\007\uffca\010\113" +
    "\011\112\012\uffca\016\uffca\020\uffca\023\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\001\002\000\032" +
    "\004\120\005\126\012\uffd6\016\uffd6\020\uffd6\023\uffd6\034" +
    "\130\035\131\036\123\037\127\040\122\041\121\001\002" +
    "\000\010\015\061\042\053\043\052\001\002\000\036\004" +
    "\uffce\005\uffce\006\105\007\107\012\uffce\016\uffce\020\uffce" +
    "\023\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\001\002\000\012\012\uffda\016\uffda\020\uffda\023\uffda" +
    "\001\002\000\030\012\uffea\015\uffea\021\uffea\022\uffea\024" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\042\uffea\043\uffea" +
    "\001\002\000\030\012\uffe8\015\uffe8\021\uffe8\022\uffe8\024" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\042\uffe8\043\uffe8" +
    "\001\002\000\030\012\uffe7\015\uffe7\021\uffe7\022\uffe7\024" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\042\uffe7\043\uffe7" +
    "\001\002\000\030\012\uffe0\015\uffe0\021\uffe0\022\uffe0\024" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\042\uffe0\043\uffe0" +
    "\001\002\000\042\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\016\uffc1\020\uffc1\023\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\001\002\000" +
    "\044\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\014\103\016\uffc2\020\uffc2\023\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\001\002\000\004" +
    "\015\073\001\002\000\010\015\061\042\053\043\052\001" +
    "\002\000\004\023\075\001\002\000\010\015\061\042\053" +
    "\043\052\001\002\000\004\023\077\001\002\000\010\015" +
    "\061\042\053\043\052\001\002\000\004\016\101\001\002" +
    "\000\024\012\045\015\061\021\033\024\051\027\044\030" +
    "\072\031\046\042\053\043\052\001\002\000\030\012\uffde" +
    "\015\uffde\021\uffde\022\uffde\024\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\042\uffde\043\uffde\001\002\000\010\015\061" +
    "\042\053\043\052\001\002\000\012\012\uffdb\016\uffdb\020" +
    "\uffdb\023\uffdb\001\002\000\010\015\uffc9\042\uffc9\043\uffc9" +
    "\001\002\000\010\015\061\042\053\043\052\001\002\000" +
    "\010\015\uffc8\042\uffc8\043\uffc8\001\002\000\042\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\016" +
    "\uffc2\020\uffc2\023\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\001\002\000\042\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\113\011\112\012\uffcb\016\uffcb\020\uffcb" +
    "\023\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\001\002\000\010\015\uffc4\042\uffc4\043\uffc4\001\002" +
    "\000\010\015\uffc5\042\uffc5\043\uffc5\001\002\000\010\015" +
    "\061\042\053\043\052\001\002\000\042\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\016\uffc7\020" +
    "\uffc7\023\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\001\002\000\004\016\117\001\002\000\042\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\016\uffc3\020\uffc3\023\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\001\002\000\010\015\uffcd\042\uffcd" +
    "\043\uffcd\001\002\000\010\015\uffd0\042\uffd0\043\uffd0\001" +
    "\002\000\010\015\uffd1\042\uffd1\043\uffd1\001\002\000\010" +
    "\015\uffd3\042\uffd3\043\uffd3\001\002\000\010\015\061\042" +
    "\053\043\052\001\002\000\010\015\061\042\053\043\052" +
    "\001\002\000\010\015\uffcc\042\uffcc\043\uffcc\001\002\000" +
    "\010\015\uffd2\042\uffd2\043\uffd2\001\002\000\010\015\uffd4" +
    "\042\uffd4\043\uffd4\001\002\000\010\015\uffd5\042\uffd5\043" +
    "\uffd5\001\002\000\036\004\uffcf\005\uffcf\006\105\007\107" +
    "\012\uffcf\016\uffcf\020\uffcf\023\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\001\002\000\016\004\120" +
    "\005\126\012\uffd7\016\uffd7\020\uffd7\023\uffd7\001\002\000" +
    "\030\012\uffe5\015\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\042\uffe5\043\uffe5\001\002\000" +
    "\012\015\061\033\142\042\053\043\052\001\002\000\010" +
    "\015\061\042\053\043\052\001\002\000\004\020\140\001" +
    "\002\000\044\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\014\uffd8\016\uffd8\020\uffd8\023\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002" +
    "\000\006\016\uffbe\023\146\001\002\000\004\016\uffbd\001" +
    "\002\000\004\016\145\001\002\000\006\016\uffbb\023\uffbb" +
    "\001\002\000\042\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\016\uffbf\020\uffbf\023\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002\000" +
    "\010\015\061\042\053\043\052\001\002\000\006\016\uffbc" +
    "\023\uffbc\001\002\000\010\015\061\042\053\043\052\001" +
    "\002\000\004\016\152\001\002\000\024\012\045\015\061" +
    "\021\033\024\051\027\044\030\072\031\046\042\053\043" +
    "\052\001\002\000\030\012\uffe3\015\uffe3\021\uffe3\022\uffe3" +
    "\024\uffe3\026\154\027\uffe3\030\uffe3\031\uffe3\042\uffe3\043" +
    "\uffe3\001\002\000\024\012\045\015\061\021\033\024\051" +
    "\027\044\030\072\031\046\042\053\043\052\001\002\000" +
    "\030\012\uffe2\015\uffe2\021\uffe2\022\uffe2\024\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\042\uffe2\043\uffe2\001\002\000" +
    "\030\012\uffdd\015\uffdd\021\uffdd\022\uffdd\024\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\042\uffdd\043\uffdd\001\002\000" +
    "\004\012\160\001\002\000\030\012\uffdc\015\uffdc\021\uffdc" +
    "\022\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\042" +
    "\uffdc\043\uffdc\001\002\000\010\015\061\042\053\043\052" +
    "\001\002\000\004\016\163\001\002\000\024\012\045\015" +
    "\061\021\033\024\051\027\044\030\072\031\046\042\053" +
    "\043\052\001\002\000\030\012\uffdf\015\uffdf\021\uffdf\022" +
    "\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\042\uffdf" +
    "\043\uffdf\001\002\000\010\016\ufff1\017\166\023\ufff1\001" +
    "\002\000\004\020\167\001\002\000\006\016\ufff0\023\ufff0" +
    "\001\002\000\006\025\006\032\004\001\002\000\006\016" +
    "\ufff3\023\ufff3\001\002\000\012\002\uffff\003\uffff\025\uffff" +
    "\032\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\016\002\006\003\007\004\004\005\013\006" +
    "\011\007\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\171\005" +
    "\013\006\011\007\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\026\010\027\011\023\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\031\001\001\000\002\001\001\000\004" +
    "\014\033\001\001\000\010\005\035\006\037\015\034\001" +
    "\001\000\042\013\046\016\042\017\063\020\064\021\065" +
    "\022\041\023\066\024\054\025\055\026\070\027\062\031" +
    "\057\033\061\035\056\037\047\040\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\025\156\026\070\027\062\031" +
    "\057\033\061\035\056\037\047\040\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\113\001\001\000\006\030" +
    "\123\032\124\001\001\000\022\025\115\026\070\027\062" +
    "\031\057\033\061\035\056\037\047\040\067\001\001\000" +
    "\004\034\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\025\073\026\070\027\062\031\057\033\061\035\056\037" +
    "\047\040\067\001\001\000\002\001\001\000\022\025\075" +
    "\026\070\027\062\031\057\033\061\035\056\037\047\040" +
    "\067\001\001\000\002\001\001\000\022\025\077\026\070" +
    "\027\062\031\057\033\061\035\056\037\047\040\067\001" +
    "\001\000\002\001\001\000\042\013\046\016\101\017\063" +
    "\020\064\021\065\022\041\023\066\024\054\025\055\026" +
    "\070\027\062\031\057\033\061\035\056\037\047\040\067" +
    "\001\001\000\002\001\001\000\022\025\103\026\070\027" +
    "\062\031\057\033\061\035\056\037\047\040\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\107\035" +
    "\110\037\047\040\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\107\037\114\040\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\107\031\132\033\061\035\056\037" +
    "\047\040\067\001\001\000\014\026\107\033\131\035\056" +
    "\037\047\040\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\105" +
    "\001\001\000\004\032\124\001\001\000\002\001\001\000" +
    "\026\025\143\026\070\027\062\031\057\033\061\035\056" +
    "\037\047\040\067\041\142\042\140\001\001\000\022\025" +
    "\136\026\070\027\062\031\057\033\061\035\056\037\047" +
    "\040\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\025\146\026\070\027" +
    "\062\031\057\033\061\035\056\037\047\040\067\001\001" +
    "\000\002\001\001\000\022\025\150\026\070\027\062\031" +
    "\057\033\061\035\056\037\047\040\067\001\001\000\002" +
    "\001\001\000\042\013\046\016\152\017\063\020\064\021" +
    "\065\022\041\023\066\024\054\025\055\026\070\027\062" +
    "\031\057\033\061\035\056\037\047\040\067\001\001\000" +
    "\002\001\001\000\042\013\046\016\154\017\063\020\064" +
    "\021\065\022\041\023\066\024\054\025\055\026\070\027" +
    "\062\031\057\033\061\035\056\037\047\040\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\025\161\026\070\027\062\031\057" +
    "\033\061\035\056\037\047\040\067\001\001\000\002\001" +
    "\001\000\042\013\046\016\163\017\063\020\064\021\065" +
    "\022\041\023\066\024\054\025\055\026\070\027\062\031" +
    "\057\033\061\035\056\037\047\040\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\026\012\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* AST root. */
    public SyntaxNode root = null; //Raiz del arbol.
 	public String producciones = ""; //Concatenacion de las producciones.
	
	public void syntax_error(Symbol cur_token)    {
		System.out.println("Hay error de sintaxis.");
		report_error("Error de sintaxis", null);
	}
        
        public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message + " -> Parser");
        System.err.println(m);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arg_list ::= expression 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += "  algo\n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arg_list ::= arg_list COMMA expression 
            {
              SyntaxNode RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode al = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // args ::= empty 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= arg_list 
            {
              SyntaxNode RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode al = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // call ::= ID PRI args PRD 
            {
              SyntaxNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode a = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= NUM 
            {
              SyntaxNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= call 
            {
              SyntaxNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode c = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= var 
            {
              SyntaxNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode v = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= PRI expression PRD 
            {
              SyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // powop ::= EXP2 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("powop",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // powop ::= EXP1 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("powop",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= exp 
            {
              SyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= factor powop exp 
            {
              SyntaxNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode f = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode p = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "  algo\n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mulop ::= DIV 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mulop ::= MULT 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor 
            {
              SyntaxNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode f = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= term mulop factor 
            {
              SyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode t = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode m = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode f = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // addop ::= RESTA 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // addop ::= SUMA 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // additive_expression ::= term 
            {
              SyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode t = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "  algo\n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= additive_expression addop term 
            {
              SyntaxNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode ae = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode ad = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode t = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relop ::= NEQ 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relop ::= EQ 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relop ::= GEQ 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relop ::= GT 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= LT 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= LEQ 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += "algo  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_expression ::= additive_expression 
            {
              SyntaxNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode ae = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_expression ::= additive_expression relop additive_expression 
            {
              SyntaxNode RESULT =null;
		int ae1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ae1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode ae1 = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode r = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ae2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ae2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode ae2 = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var ::= ID PCI expression PCD 
            {
              SyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            
            this.parser.producciones += " algo \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= ID 
            {
              SyntaxNode RESULT =null;
		
            this.parser.producciones += "var::= ID  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= simple_expression 
            {
              SyntaxNode RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode se = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "expression::= simple_expression  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= var ASIGN expression 
            {
              SyntaxNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode v = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "expression::= var ASIGN expression  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return_stmt ::= RETURN expression PCOMMA 
            {
              SyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            
            this.parser.producciones += "return_stmt::= RETURN expression PCOMMA   \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_stmt ::= RETURN PCOMMA 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += "return_stmt::= RETURN PCOMMA   \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for_stmt ::= FOR PRI expression COMMA expression COMMA expression PRD statement 
            {
              SyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SyntaxNode e1 = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SyntaxNode e2 = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode e3 = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode s = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "for_stmt::=  FOR ( expression , expression , expression ) statement \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // while_stmt ::= WHILE PRI expression PRD statement 
            {
              SyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode s = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "while_stmt::= WHILE ( expression) statement  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // iteration_stmt ::= for_stmt 
            {
              SyntaxNode RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode fs = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "iteration_stmt::= for_stmt  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteration_stmt ::= while_stmt 
            {
              SyntaxNode RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode ws = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "iteration_stmt::=  while_stmt  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // selection_stmt ::= IF PRI expression PRD statement ELSE statement 
            {
              SyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode s1 = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode s2 = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "selection_stmt::= IF (expression) statement ELSE statement\n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_stmt ::= IF PRI expression PRD statement 
            {
              SyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode s = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += " selection_stmt::= IF ( expression ) statement\n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_stmt ::= PCOMMA 
            {
              SyntaxNode RESULT =null;
		
            
            this.parser.producciones += "expression_stmt::= ;  \n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_stmt ::= expression PCOMMA 
            {
              SyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            
            this.parser.producciones += "expression_stmt::= expression ; \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= return_stmt 
            {
              SyntaxNode RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode rs = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "statement::= return_stmt: \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= iteration_stmt 
            {
              SyntaxNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode is = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "statement::= iteration_stmt \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= selection_stmt 
            {
              SyntaxNode RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode ss = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "statement::= selection_stmt \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= compound_stmt 
            {
              SyntaxNode RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode cs = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "statement::= compound_stmt  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= expression_stmt 
            {
              SyntaxNode RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode es = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "statement::= expression_stmt  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement_list ::= empty 
            {
              SyntaxNode RESULT =null;
		
            this.parser.producciones += " EMPTY \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= statement_list statement 
            {
              SyntaxNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode sl = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode s = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "statement_list::= statement_list statement \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // local_declarations ::= 
            {
              SyntaxNode RESULT =null;
		
            this.parser.producciones += "  EMPTY\n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= local_declarations var_declaration 
            {
              SyntaxNode RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode ld = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode vd = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "local_declarations::= local_declarations var_declaration \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compound_stmt ::= LLI local_declarations statement_list LLD 
            {
              SyntaxNode RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode ld = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode sl = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            
            this.parser.producciones += " compound_stmt::= { local_declarations statement_list }   \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= type_specifier ID PCI PCD 
            {
              SyntaxNode RESULT =null;
		
             
            this.parser.producciones += "param::= type_specifier ID [ ] \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_specifier ID 
            {
              SyntaxNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode ts = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += " param::= type_specifier ID \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param_list ::= param 
            {
              SyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode p = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "param_list::= param  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param_list COMMA param 
            {
              SyntaxNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode pl = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode p = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "param_list::= param_list , param   \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // params ::= VOID 
            {
              SyntaxNode RESULT =null;
		
            this.parser.producciones += "params::= VOID \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= param_list 
            {
              SyntaxNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode pl = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "params::= param_list \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fun_declaration ::= type_specifier ID PRI params PRD compound_stmt 
            {
              SyntaxNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SyntaxNode ts = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode p = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode cs = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "fun_declaration::= type_specifier ID ( params ) compound_stmt \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_specifier ::= VOID 
            {
              SyntaxNode RESULT =null;
		
            this.parser.producciones += "type_specifier::= VOID \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= INT 
            {
              SyntaxNode RESULT =null;
		
            this.parser.producciones += "type_specifier::= INT \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_declaration ::= type_specifier ID PCI NUM PCD PCOMMA 
            {
              SyntaxNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SyntaxNode ts = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            this.parser.producciones += "var_declaration::=type_specifier ID [ NUM ];\n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_declaration ::= type_specifier ID PCOMMA 
            {
              SyntaxNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SyntaxNode ts = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		           
            this.parser.producciones += "var_declaration::= type_specifier ID ; \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= error 
            {
              SyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             parser.report_error("Syntax error, stki rest", e );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= fun_declaration 
            {
              SyntaxNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode fd = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "declaration ::= fun_declaration \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= var_declaration 
            {
              SyntaxNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode vd = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "declaration ::= var_declaration, por aca tambien  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration 
            {
              SyntaxNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode d = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            this.parser.producciones += "declaration_list ::= declaration, pase por aca  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              SyntaxNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode dl = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode d = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            
            this.parser.producciones += "declaration_list::= pase por aqui  \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              SyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SyntaxNode e = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				this.parser.root = e;				
				this.parser.producciones += "program::== declaration_list, empiezo aca\n";
                                System.out.println(this.parser.producciones);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode start_val = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

