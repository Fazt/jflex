
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 26 22:26:09 GMT-03:00 2015
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import analizadorlexico.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 26 22:26:09 GMT-03:00 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\005\005\000\002\005\010\000" +
    "\002\004\003\000\002\004\003\000\002\007\010\000\002" +
    "\011\003\000\002\011\003\000\002\010\005\000\002\010" +
    "\003\000\002\012\004\000\002\012\006\000\002\023\006" +
    "\000\002\020\004\000\002\020\002\000\002\021\004\000" +
    "\002\021\002\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\033" +
    "\004\000\002\033\003\000\002\013\007\000\002\013\011" +
    "\000\002\014\003\000\002\014\003\000\002\015\007\000" +
    "\002\017\013\000\002\016\004\000\002\016\005\000\002" +
    "\031\005\000\002\031\003\000\002\030\003\000\002\030" +
    "\006\000\002\036\005\000\002\036\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\035\005\000\002" +
    "\035\003\000\002\025\003\000\002\025\003\000\002\034" +
    "\005\000\002\034\003\000\002\026\003\000\002\026\003" +
    "\000\002\037\005\000\002\037\003\000\002\027\003\000" +
    "\002\027\003\000\002\032\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\040\006\000\002\041" +
    "\003\000\002\041\002\000\002\042\005\000\002\042\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\010\003\013\033\004\037\006\001\002\000" +
    "\004\040\ufff8\001\002\000\012\002\ufffe\003\ufffe\033\ufffe" +
    "\037\ufffe\001\002\000\004\040\ufff7\001\002\000\004\002" +
    "\171\001\002\000\012\002\000\003\013\033\004\037\006" +
    "\001\002\000\012\002\ufffc\003\ufffc\033\ufffc\037\ufffc\001" +
    "\002\000\004\040\015\001\002\000\012\002\ufffb\003\ufffb" +
    "\033\ufffb\037\ufffb\001\002\000\012\002\ufffd\003\ufffd\033" +
    "\ufffd\037\ufffd\001\002\000\010\023\017\025\016\027\020" +
    "\001\002\000\006\033\004\037\026\001\002\000\004\041" +
    "\021\001\002\000\036\002\ufffa\003\ufffa\021\ufffa\022\ufffa" +
    "\025\ufffa\027\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\001\002\000\004\024\022" +
    "\001\002\000\004\027\023\001\002\000\036\002\ufff9\003" +
    "\ufff9\021\ufff9\022\ufff9\025\ufff9\027\ufff9\031\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\001" +
    "\002\000\006\026\ufff5\030\166\001\002\000\006\026\ufff2" +
    "\030\ufff2\001\002\000\006\026\ufff4\040\ufff7\001\002\000" +
    "\004\040\163\001\002\000\004\026\031\001\002\000\004" +
    "\021\033\001\002\000\012\002\ufff6\003\ufff6\033\ufff6\037" +
    "\ufff6\001\002\000\032\021\uffed\022\uffed\025\uffed\027\uffed" +
    "\031\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\001\002\000\032\021\uffeb\022\uffeb\025\uffeb" +
    "\027\uffeb\031\uffeb\033\004\034\uffeb\035\uffeb\036\uffeb\037" +
    "\006\040\uffeb\041\uffeb\001\002\000\026\021\033\022\053" +
    "\025\060\027\044\031\050\034\045\035\043\036\071\040" +
    "\051\041\052\001\002\000\032\021\uffee\022\uffee\025\uffee" +
    "\027\uffee\031\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\001\002\000\004\040\040\001\002" +
    "\000\006\023\017\027\020\001\002\000\030\021\uffe1\022" +
    "\uffe1\025\uffe1\027\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\040\uffe1\041\uffe1\001\002\000\026\021\uffec\022" +
    "\uffec\025\uffec\027\uffec\031\uffec\034\uffec\035\uffec\036\uffec" +
    "\040\uffec\041\uffec\001\002\000\004\025\157\001\002\000" +
    "\030\021\uffe4\022\uffe4\025\uffe4\027\uffe4\031\uffe4\032\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\001\002\000" +
    "\012\025\060\027\154\040\051\041\052\001\002\000\030" +
    "\021\uffe9\022\uffe9\025\uffe9\027\uffe9\031\uffe9\032\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\040\uffe9\041\uffe9\001\002\000\042" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\024\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\001\002\000\004\025\146\001" +
    "\002\000\050\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\023\135\024\uffd9\025\134\026\uffd9\027\uffd9" +
    "\030\uffd9\001\002\000\042\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0\001" +
    "\002\000\040\002\uffef\003\uffef\021\uffef\022\uffef\025\uffef" +
    "\027\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\001\002\000\030\021\uffe6" +
    "\022\uffe6\025\uffe6\027\uffe6\031\uffe6\032\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\040\uffe6\041\uffe6\001\002\000\004\027\133" +
    "\001\002\000\042\005\112\006\111\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\024\uffca\026\uffca\027\uffca\030\uffca\001\002\000" +
    "\032\007\117\011\125\013\121\014\127\015\130\016\122" +
    "\017\126\020\120\024\uffd6\026\uffd6\027\uffd6\030\uffd6\001" +
    "\002\000\010\025\060\040\051\041\052\001\002\000\036" +
    "\007\uffce\010\104\011\uffce\012\106\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\024\uffce\026\uffce\027\uffce" +
    "\030\uffce\001\002\000\012\024\uffda\026\uffda\027\uffda\030" +
    "\uffda\001\002\000\030\021\uffea\022\uffea\025\uffea\027\uffea" +
    "\031\uffea\032\uffea\034\uffea\035\uffea\036\uffea\040\uffea\041" +
    "\uffea\001\002\000\030\021\uffe8\022\uffe8\025\uffe8\027\uffe8" +
    "\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8\041" +
    "\uffe8\001\002\000\030\021\uffe7\022\uffe7\025\uffe7\027\uffe7" +
    "\031\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7\041" +
    "\uffe7\001\002\000\030\021\uffe0\022\uffe0\025\uffe0\027\uffe0" +
    "\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\041" +
    "\uffe0\001\002\000\042\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\001\002" +
    "\000\044\004\102\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2\001\002\000" +
    "\004\025\072\001\002\000\010\025\060\040\051\041\052" +
    "\001\002\000\004\030\074\001\002\000\010\025\060\040" +
    "\051\041\052\001\002\000\004\030\076\001\002\000\010" +
    "\025\060\040\051\041\052\001\002\000\004\026\100\001" +
    "\002\000\024\021\033\025\060\027\044\031\050\034\045" +
    "\035\043\036\071\040\051\041\052\001\002\000\030\021" +
    "\uffde\022\uffde\025\uffde\027\uffde\031\uffde\032\uffde\034\uffde" +
    "\035\uffde\036\uffde\040\uffde\041\uffde\001\002\000\010\025" +
    "\060\040\051\041\052\001\002\000\012\024\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\001\002\000\010\025\uffc9\040\uffc9\041" +
    "\uffc9\001\002\000\010\025\060\040\051\041\052\001\002" +
    "\000\010\025\uffc8\040\uffc8\041\uffc8\001\002\000\042\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\024\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\001\002\000\042\005\112\006\111" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\024\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\001\002\000\010\025\uffc4\040\uffc4\041\uffc4\001" +
    "\002\000\010\025\uffc5\040\uffc5\041\uffc5\001\002\000\010" +
    "\025\060\040\051\041\052\001\002\000\042\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\024\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\001\002\000\004\026\116\001\002\000\042" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\024\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\001\002\000\010\025\uffcd\040" +
    "\uffcd\041\uffcd\001\002\000\010\025\uffd0\040\uffd0\041\uffd0" +
    "\001\002\000\010\025\uffd1\040\uffd1\041\uffd1\001\002\000" +
    "\010\025\uffd3\040\uffd3\041\uffd3\001\002\000\010\025\060" +
    "\040\051\041\052\001\002\000\010\025\060\040\051\041" +
    "\052\001\002\000\010\025\uffcc\040\uffcc\041\uffcc\001\002" +
    "\000\010\025\uffd2\040\uffd2\041\uffd2\001\002\000\010\025" +
    "\uffd4\040\uffd4\041\uffd4\001\002\000\010\025\uffd5\040\uffd5" +
    "\041\uffd5\001\002\000\036\007\uffcf\010\104\011\uffcf\012" +
    "\106\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\030\uffcf\001\002\000\016\007" +
    "\117\011\125\024\uffd7\026\uffd7\027\uffd7\030\uffd7\001\002" +
    "\000\030\021\uffe5\022\uffe5\025\uffe5\027\uffe5\031\uffe5\032" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\001\002" +
    "\000\012\025\060\026\uffbd\040\051\041\052\001\002\000" +
    "\010\025\060\040\051\041\052\001\002\000\004\024\137" +
    "\001\002\000\044\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\001" +
    "\002\000\006\026\uffbe\030\144\001\002\000\004\026\143" +
    "\001\002\000\006\026\uffbb\030\uffbb\001\002\000\042\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\001\002\000\010\025\060\040\051" +
    "\041\052\001\002\000\006\026\uffbc\030\uffbc\001\002\000" +
    "\010\025\060\040\051\041\052\001\002\000\004\026\150" +
    "\001\002\000\024\021\033\025\060\027\044\031\050\034" +
    "\045\035\043\036\071\040\051\041\052\001\002\000\030" +
    "\021\uffe3\022\uffe3\025\uffe3\027\uffe3\031\uffe3\032\152\034" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\001\002\000\024" +
    "\021\033\025\060\027\044\031\050\034\045\035\043\036" +
    "\071\040\051\041\052\001\002\000\030\021\uffe2\022\uffe2" +
    "\025\uffe2\027\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\040\uffe2\041\uffe2\001\002\000\030\021\uffdd\022\uffdd" +
    "\025\uffdd\027\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\040\uffdd\041\uffdd\001\002\000\004\027\156\001\002" +
    "\000\030\021\uffdc\022\uffdc\025\uffdc\027\uffdc\031\uffdc\032" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\001\002" +
    "\000\010\025\060\040\051\041\052\001\002\000\004\026" +
    "\161\001\002\000\024\021\033\025\060\027\044\031\050" +
    "\034\045\035\043\036\071\040\051\041\052\001\002\000" +
    "\030\021\uffdf\022\uffdf\025\uffdf\027\uffdf\031\uffdf\032\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\040\uffdf\041\uffdf\001\002\000" +
    "\010\023\164\026\ufff1\030\ufff1\001\002\000\004\024\165" +
    "\001\002\000\006\026\ufff0\030\ufff0\001\002\000\006\033" +
    "\004\037\006\001\002\000\006\026\ufff3\030\ufff3\001\002" +
    "\000\012\002\uffff\003\uffff\033\uffff\037\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\016\002\006\003\007\004\011\005\013\006" +
    "\004\007\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\011\005" +
    "\013\006\167\007\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\026\010\023\011\027\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\031\001\001\000\002\001\001\000\004" +
    "\020\033\001\001\000\010\004\036\005\035\021\034\001" +
    "\001\000\042\013\063\014\064\015\040\016\053\017\065" +
    "\022\041\023\045\030\067\031\054\032\046\033\062\034" +
    "\060\035\056\036\061\037\055\040\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\030\067\031\154\032\046\034\060\035\056\036" +
    "\061\037\055\040\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\112\001\001\000\006\024\122\025\123\001" +
    "\001\000\022\030\067\031\114\032\046\034\060\035\056" +
    "\036\061\037\055\040\066\001\001\000\004\026\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\067\031\072" +
    "\032\046\034\060\035\056\036\061\037\055\040\066\001" +
    "\001\000\002\001\001\000\022\030\067\031\074\032\046" +
    "\034\060\035\056\036\061\037\055\040\066\001\001\000" +
    "\002\001\001\000\022\030\067\031\076\032\046\034\060" +
    "\035\056\036\061\037\055\040\066\001\001\000\002\001" +
    "\001\000\042\013\063\014\064\015\040\016\053\017\065" +
    "\022\100\023\045\030\067\031\054\032\046\033\062\034" +
    "\060\035\056\036\061\037\055\040\066\001\001\000\002" +
    "\001\001\000\022\030\067\031\102\032\046\034\060\035" +
    "\056\036\061\037\055\040\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\030\106\032\046\037\107\040" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\106\032\113\040\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\030\106\032\046\034\060\035\131\037\055\040\066\001" +
    "\001\000\014\030\106\032\046\034\130\037\055\040\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\104\001\001\000\004" +
    "\025\123\001\001\000\002\001\001\000\026\030\067\031" +
    "\141\032\046\034\060\035\056\036\061\037\055\040\066" +
    "\041\140\042\137\001\001\000\022\030\067\031\135\032" +
    "\046\034\060\035\056\036\061\037\055\040\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\030\067\031\144\032\046\034\060\035\056\036\061\037" +
    "\055\040\066\001\001\000\002\001\001\000\022\030\067" +
    "\031\146\032\046\034\060\035\056\036\061\037\055\040" +
    "\066\001\001\000\002\001\001\000\042\013\063\014\064" +
    "\015\040\016\053\017\065\022\150\023\045\030\067\031" +
    "\054\032\046\033\062\034\060\035\056\036\061\037\055" +
    "\040\066\001\001\000\002\001\001\000\042\013\063\014" +
    "\064\015\040\016\053\017\065\022\152\023\045\030\067" +
    "\031\054\032\046\033\062\034\060\035\056\036\061\037" +
    "\055\040\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\030\067\031" +
    "\157\032\046\034\060\035\056\036\061\037\055\040\066" +
    "\001\001\000\002\001\001\000\042\013\063\014\064\015" +
    "\040\016\053\017\065\022\161\023\045\030\067\031\054" +
    "\032\046\033\062\034\060\035\056\036\061\037\055\040" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\026\012\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String cadena = " "; /* contiene la cadena de producciones */

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error Sintactico");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en linea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : "+message + " -> Parser");
        System.err.println(m);
    }

    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left + " column " + s.right); 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arg_list ::= expression 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "arg_list ::= expression \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arg_list ::= arg_list COMMA expression 
            {
              ExprBinary RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary al = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "arg_list ::= arg_list COMMA expression \n"+this.parser.cadena;
                                if(e != null){
                                }
                                RESULT=al;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // args ::= 
            {
              ExprBinary RESULT =null;
		
                                this.parser.cadena = "args ::= EMPTY \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= arg_list 
            {
              ExprBinary RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary al = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "args ::= arg_list \n"+this.parser.cadena;
                                RESULT=al;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // call ::= ID PRI args PRD 
            {
              ExprBinary RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprBinary ar = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                this.parser.cadena = "call ::= ID:id PARENT_IZQ args PARENT_DER \n"+this.parser.cadena;
                                RESULT=ar;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= NUM 
            {
              ExprBinary RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "exp ::= NUM \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= call 
            {
              ExprBinary RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary c = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "exp ::= call \n"+this.parser.cadena;
                                RESULT=c;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= var 
            {
              ExprBinary RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary v = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "exp ::= var \n"+this.parser.cadena;
                                RESULT=v;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= PRI expression PRD 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                this.parser.cadena = "exp ::= PARENT_IZQ expression PARENT_DER \n"+this.parser.cadena;
                                RESULT=e;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // powop ::= EXP2 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "powop ::= EXPO2 \n"+this.parser.cadena;
                                RESULT=e2;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("powop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // powop ::= EXP1 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "powop ::= EXPO1 \n"+this.parser.cadena;
                                RESULT=e1;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("powop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= exp 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "factor ::= exp \n"+this.parser.cadena;
                                RESULT=e;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= factor powop exp 
            {
              ExprBinary RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary f = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "factor ::= factor powop exp \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mulop ::= DIV 
            {
              String RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "mulop ::= DIV \n"+this.parser.cadena;
                                RESULT=div;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mulop ::= MULT 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "mulop ::= MULT \n"+this.parser.cadena;
                                RESULT=mu;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor 
            {
              ExprBinary RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary f = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "term ::= factor \n"+this.parser.cadena;
                                RESULT=f;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= term mulop factor 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary f = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "term ::= term mulop factor \n"+this.parser.cadena;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // addop ::= RESTA 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "addop ::= RESTA \n"+this.parser.cadena;
                                RESULT=res;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // addop ::= SUMA 
            {
              String RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "addop ::= SUMA \n"+this.parser.cadena;
                                RESULT=sum;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // additive_expression ::= term 
            {
              ExprBinary RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary t = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "additive_expression ::= term \n"+this.parser.cadena;
                                RESULT=t;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= additive_expression addop term 
            {
              ExprBinary RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary ae = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary t = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "additive_expression ::= additive_expression addop term \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relop ::= NEQ 
            {
              String RESULT =null;
		int disleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int disright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= NEQ \n"+this.parser.cadena;
                                RESULT=dis;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relop ::= EQ 
            {
              String RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= EQ \n"+this.parser.cadena;
                                RESULT=ii;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relop ::= GEQ 
            {
              String RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String may = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= GEQ \n"+this.parser.cadena;
                                RESULT=may;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relop ::= GT 
            {
              String RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= GT \n"+this.parser.cadena;
                                RESULT=ma;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= LT 
            {
              String RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String men = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= LT \n"+this.parser.cadena;
                                RESULT=men;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= LEQ 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= LEQ \n"+this.parser.cadena;
                                RESULT=me;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_expression ::= additive_expression 
            {
              ExprBinary RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary ae = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "simple_expression ::= additive_expression \n"+this.parser.cadena;
                                RESULT=ae;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_expression ::= additive_expression relop additive_expression 
            {
              ExprBinary RESULT =null;
		int ae1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ae1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary ae1 = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ae2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ae2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary ae2 = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "simple_expression ::= additive_expression relop aditive_expression \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var ::= ID PCI expression PCD 
            {
              ExprBinary RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                this.parser.cadena = "var ::= ID LSQUAREB expression RSQUAREB \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= ID 
            {
              ExprBinary RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "var ::= ID \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= simple_expression 
            {
              ExprBinary RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary se = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "expression ::= simple_expression \n"+this.parser.cadena;
                                RESULT=se;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= var ASIGN expression 
            {
              ExprBinary RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary v = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "expression ::= var ASSIGN expression \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return_stmt ::= RETURN expression PCOMMA 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                this.parser.cadena = "return ::= RETURN expression SEMICOLON \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_stmt ::= RETURN PCOMMA 
            {
              ExprBinary RESULT =null;
		
                                this.parser.cadena = "return ::= RETURN SEMICOLON \n"+this.parser.cadena;
                                
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for_stmt ::= FOR PRI expression COMMA expression COMMA expression PRD statement 
            {
              ExprBinary RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExprBinary e1 = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprBinary e2 = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary e3 = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary s = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "for_stmt ::= FOR LCIRCLEB expression SEMICOLON expression SEMICOLON expression RCIRCLEB statement \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // while_stmt ::= WHILE PRI expression PRD statement 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary s = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "while_stmt ::= WHILE LCIRCLEB expression RCIRCLEB statement \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // iteration_stmt ::= for_stmt 
            {
              ExprBinary RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary fs = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "iteration_stmt ::= for_stmt \n"+this.parser.cadena;
                                RESULT=fs;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteration_stmt ::= while_stmt 
            {
              ExprBinary RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary ws = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "iteration_stmt ::= while_stmt \n"+this.parser.cadena;
                                RESULT=ws;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // selection_stmt ::= IF PRI expression PRD statement ELSE statement 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary s1 = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary s2 = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "selection_stmt ::= IF LCIRCLEB expression RCIRCLEB statement ELSE statement \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_stmt ::= IF PRI expression PRD statement 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary s = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "selection_stmt ::= IF LCURLYB expression RCURLYB statement \n"+this.parser.cadena;
                                
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_stmt ::= PCOMMA 
            {
              ExprBinary RESULT =null;
		
                                this.parser.cadena = "expression_stmt ::= PUNTOCOMA \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_stmt ::= expression PCOMMA 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprBinary e = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                this.parser.cadena = "expression_stmt ::= expression PUNTOCOMA \n"+this.parser.cadena;
                                RESULT=e;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= return_stmt 
            {
              ExprBinary RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary rs = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= return_stmt \n"+this.parser.cadena;
                                RESULT=rs;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= iteration_stmt 
            {
              ExprBinary RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary is = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= iteration_stmt \n"+this.parser.cadena;
                                RESULT=is;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= selection_stmt 
            {
              ExprBinary RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary ss = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= selection_stmt \n"+this.parser.cadena;
                                RESULT=ss;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= compound_stmt 
            {
              ExprBinary RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary cs = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= compound_stmt \n"+this.parser.cadena;
                                RESULT=cs;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= expression_stmt 
            {
              ExprBinary RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary es = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= expression_stmt \n"+this.parser.cadena;
                                RESULT=es;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement_list ::= 
            {
              ExprBinary RESULT =null;
		
                                this.parser.cadena = "statement_list ::= EMPTY \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= statement_list statement 
            {
              ExprBinary RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprBinary sl = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary s = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "statement_list ::= statement_list statement \n"+this.parser.cadena;
                                RESULT=sl;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // local_declarations ::= 
            {
              ExprBinary RESULT =null;
		
                                this.parser.cadena = "local_declarations ::= EMPTY \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= local_declarations var_declaration 
            {
              ExprBinary RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprBinary ld = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary vd = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "local_declarations ::= local_declarations var_declaration \n"+this.parser.cadena;
                                RESULT=ld;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compound_stmt ::= LLI local_declarations statement_list LLD 
            {
              ExprBinary RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary ld = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprBinary sl = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                this.parser.cadena = "compound_stmt ::= LCURLYB local_declarations statement_list RCURLYB \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= type_specifier ID PCI PCD 
            {
              ExprBinary RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                this.parser.cadena = "param ::= type_specifier ID CORCH_IZQ CORCH_DER \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_specifier ID 
            {
              ExprBinary RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "param ::= type_specifier \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param_list ::= param 
            {
              ExprBinary RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary p = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "param_list ::= param \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param_list COMMA param 
            {
              ExprBinary RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary pl = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary p = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "param_list ::= param_list COMMA param \n"+this.parser.cadena;
                                RESULT=pl;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // params ::= VOID 
            {
              ExprBinary RESULT =null;
		
                                this.parser.cadena = "params ::= VOID \n"+this.parser.cadena;
                              
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= param_list 
            {
              ExprBinary RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary pl = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "params ::= param_list \n"+this.parser.cadena;
                                RESULT=pl;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fun_declaration ::= type_specifier ID PRI params PRD compound_stmt 
            {
              ExprBinary RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprBinary ps = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary cs = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "fun_declaration ::= type_specifier ID LCIRCLEB params RCIRCLEB compound_stmt \n"+this.parser.cadena;
                                RESULT= ps;

                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_specifier ::= VOID 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "type_specifier ::= VOID \n"+this.parser.cadena;
                                RESULT=v;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "type_specifier ::= INT \n"+this.parser.cadena;
                                RESULT=i;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_declaration ::= type_specifier ID PCI NUM PCD PCOMMA 
            {
              ExprBinary RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                this.parser.cadena = "var_declaration ::= type_specifier ID LSQUAREB NUM RSQUAREB SEMICOLON \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_declaration ::= type_specifier ID PCOMMA 
            {
              ExprBinary RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                this.parser.cadena = "var_declaration ::= type_specifier ID SEMICOLON \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= error 
            {
              ExprBinary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                parser.report_error("Syntax error, skip rest",e);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= fun_declaration 
            {
              ExprBinary RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary fd = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "declaration ::= fun_declaration \n"+this.parser.cadena;
                                RESULT=fd;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= var_declaration 
            {
              ExprBinary RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary vd = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "declaration ::= var_declaration \n"+this.parser.cadena;
                                RESULT=vd;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration 
            {
              ExprBinary RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary d = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "declaration_list ::= declaration \n"+this.parser.cadena;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              ExprBinary RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprBinary dl = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary d = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "declaration_list ::= declaration_list declaration \n"+this.parser.cadena;
                                RESULT=dl;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              SyntaxNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary dl = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                this.parser.cadena = "program ::= declaration_list \n"+this.parser.cadena;
                                System.out.println("Fin de analisis sintactico");
                                System.out.println(this.parser.cadena);
                                RESULT = dl;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SyntaxNode start_val = (SyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

