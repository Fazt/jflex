
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 01 17:26:21 GMT-03:00 2015
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ast.*;
import parser.sym;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 01 17:26:21 GMT-03:00 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\005\010\000\002\036\003\000" +
    "\002\036\003\000\002\006\010\000\002\007\003\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\004\000\002\011\006\000\002\012\006\000\002\013\004" +
    "\000\002\013\002\000\002\014\004\000\002\014\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\004\000\002\016" +
    "\003\000\002\017\007\000\002\017\011\000\002\020\003" +
    "\000\002\020\003\000\002\021\007\000\002\022\013\000" +
    "\002\023\004\000\002\023\005\000\002\030\005\000\002" +
    "\030\003\000\002\031\003\000\002\031\006\000\002\032" +
    "\005\000\002\032\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\033\005\000\002\033\003\000\002" +
    "\037\003\000\002\037\003\000\002\034\005\000\002\034" +
    "\003\000\002\040\003\000\002\040\003\000\002\035\005" +
    "\000\002\035\003\000\002\042\003\000\002\042\003\000" +
    "\002\024\005\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\006\000\002\026\003\000\002\026" +
    "\002\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\006\024\010\031\013\001\002\000\004\002" +
    "\170\001\002\000\010\002\ufffc\024\ufffc\031\ufffc\001\002" +
    "\000\010\002\ufffd\024\ufffd\031\ufffd\001\002\000\010\002" +
    "\000\024\010\031\013\001\002\000\004\041\ufff8\001\002" +
    "\000\004\041\014\001\002\000\010\002\ufffe\024\ufffe\031" +
    "\ufffe\001\002\000\004\041\ufff9\001\002\000\010\012\017" +
    "\014\015\016\016\001\002\000\006\024\024\031\013\001" +
    "\002\000\004\040\020\001\002\000\034\002\ufffb\012\ufffb" +
    "\014\ufffb\020\ufffb\021\ufffb\023\ufffb\024\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\040\ufffb\041\ufffb\001\002\000\004" +
    "\017\021\001\002\000\004\012\022\001\002\000\034\002" +
    "\ufffa\012\ufffa\014\ufffa\020\ufffa\021\ufffa\023\ufffa\024\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\040\ufffa\041\ufffa\001" +
    "\002\000\006\015\ufff6\022\165\001\002\000\006\015\ufff5" +
    "\041\ufff8\001\002\000\004\041\162\001\002\000\004\015" +
    "\030\001\002\000\006\015\ufff3\022\ufff3\001\002\000\004" +
    "\020\032\001\002\000\010\002\ufff7\024\ufff7\031\ufff7\001" +
    "\002\000\032\012\uffee\014\uffee\020\uffee\021\uffee\023\uffee" +
    "\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\040\uffee\041" +
    "\uffee\001\002\000\032\012\uffec\014\uffec\020\uffec\021\uffec" +
    "\023\uffec\024\010\026\uffec\027\uffec\030\uffec\031\013\040" +
    "\uffec\041\uffec\001\002\000\026\012\042\014\057\020\032" +
    "\021\052\023\047\026\043\027\066\030\044\040\051\041" +
    "\050\001\002\000\032\012\uffef\014\uffef\020\uffef\021\uffef" +
    "\023\uffef\024\uffef\026\uffef\027\uffef\030\uffef\031\uffef\040" +
    "\uffef\041\uffef\001\002\000\004\041\037\001\002\000\006" +
    "\012\017\016\016\001\002\000\030\012\uffe2\014\uffe2\020" +
    "\uffe2\021\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\040\uffe2\041\uffe2\001\002\000\026\012\uffed\014\uffed\020" +
    "\uffed\021\uffed\023\uffed\026\uffed\027\uffed\030\uffed\040\uffed" +
    "\041\uffed\001\002\000\030\012\uffe5\014\uffe5\020\uffe5\021" +
    "\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\040\uffe5" +
    "\041\uffe5\001\002\000\004\014\156\001\002\000\012\012" +
    "\153\014\057\040\051\041\050\001\002\000\030\012\uffea" +
    "\014\uffea\020\uffea\021\uffea\023\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\040\uffea\041\uffea\001\002\000\042\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\015" +
    "\uffc7\017\uffc7\022\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\001\002\000\004\014\145\001\002\000" +
    "\050\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\133\015\uffda\016\134\017\uffda\022" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\001\002\000\042\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\015\uffc1\017\uffc1\022\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002\000" +
    "\036\002\ufff0\012\ufff0\014\ufff0\020\ufff0\021\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\040" +
    "\ufff0\041\ufff0\001\002\000\004\012\132\001\002\000\030" +
    "\012\uffe7\014\uffe7\020\uffe7\021\uffe7\023\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\040\uffe7\041\uffe7\001\002\000\042" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\111\011\110\012" +
    "\uffcb\015\uffcb\017\uffcb\022\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\001\002\000\032\004\116\005" +
    "\124\012\uffd7\015\uffd7\017\uffd7\022\uffd7\032\126\033\127" +
    "\034\121\035\125\036\120\037\117\001\002\000\010\014" +
    "\057\040\051\041\050\001\002\000\036\004\uffcf\005\uffcf" +
    "\006\103\007\105\012\uffcf\015\uffcf\017\uffcf\022\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002" +
    "\000\012\012\uffdb\015\uffdb\017\uffdb\022\uffdb\001\002\000" +
    "\030\012\uffeb\014\uffeb\020\uffeb\021\uffeb\023\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\040\uffeb\041\uffeb\001\002\000" +
    "\030\012\uffe9\014\uffe9\020\uffe9\021\uffe9\023\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\040\uffe9\041\uffe9\001\002\000" +
    "\030\012\uffe8\014\uffe8\020\uffe8\021\uffe8\023\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\040\uffe8\041\uffe8\001\002\000" +
    "\030\012\uffe1\014\uffe1\020\uffe1\021\uffe1\023\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\040\uffe1\041\uffe1\001\002\000" +
    "\004\014\073\001\002\000\042\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\015\uffc2\017\uffc2\022" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\001\002\000\044\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\071\015\uffc3\017\uffc3\022\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\001" +
    "\002\000\010\014\057\040\051\041\050\001\002\000\012" +
    "\012\uffdc\015\uffdc\017\uffdc\022\uffdc\001\002\000\010\014" +
    "\057\040\051\041\050\001\002\000\004\022\075\001\002" +
    "\000\010\014\057\040\051\041\050\001\002\000\004\022" +
    "\077\001\002\000\010\014\057\040\051\041\050\001\002" +
    "\000\004\015\101\001\002\000\024\012\042\014\057\020" +
    "\032\023\047\026\043\027\066\030\044\040\051\041\050" +
    "\001\002\000\030\012\uffdf\014\uffdf\020\uffdf\021\uffdf\023" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\040\uffdf\041\uffdf" +
    "\001\002\000\010\014\uffca\040\uffca\041\uffca\001\002\000" +
    "\010\014\057\040\051\041\050\001\002\000\010\014\uffc9" +
    "\040\uffc9\041\uffc9\001\002\000\042\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\015\uffc3\017\uffc3" +
    "\022\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\001\002\000\042\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\111\011\110\012\uffcc\015\uffcc\017\uffcc\022\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\001\002" +
    "\000\010\014\uffc5\040\uffc5\041\uffc5\001\002\000\010\014" +
    "\uffc6\040\uffc6\041\uffc6\001\002\000\010\014\057\040\051" +
    "\041\050\001\002\000\042\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\015\uffc8\017\uffc8\022\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\001" +
    "\002\000\004\015\115\001\002\000\042\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\015\uffc4\017" +
    "\uffc4\022\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\001\002\000\010\014\uffce\040\uffce\041\uffce\001" +
    "\002\000\010\014\uffd1\040\uffd1\041\uffd1\001\002\000\010" +
    "\014\uffd2\040\uffd2\041\uffd2\001\002\000\010\014\uffd4\040" +
    "\uffd4\041\uffd4\001\002\000\010\014\057\040\051\041\050" +
    "\001\002\000\010\014\057\040\051\041\050\001\002\000" +
    "\010\014\uffcd\040\uffcd\041\uffcd\001\002\000\010\014\uffd3" +
    "\040\uffd3\041\uffd3\001\002\000\010\014\uffd5\040\uffd5\041" +
    "\uffd5\001\002\000\010\014\uffd6\040\uffd6\041\uffd6\001\002" +
    "\000\036\004\uffd0\005\uffd0\006\103\007\105\012\uffd0\015" +
    "\uffd0\017\uffd0\022\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\001\002\000\016\004\116\005\124\012" +
    "\uffd8\015\uffd8\017\uffd8\022\uffd8\001\002\000\030\012\uffe6" +
    "\014\uffe6\020\uffe6\021\uffe6\023\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\040\uffe6\041\uffe6\001\002\000\012\014\057" +
    "\015\uffbe\040\051\041\050\001\002\000\010\014\057\040" +
    "\051\041\050\001\002\000\004\017\136\001\002\000\044" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\015\uffd9\017\uffd9\022\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\001\002\000\006\015" +
    "\uffbf\022\143\001\002\000\006\015\uffbc\022\uffbc\001\002" +
    "\000\004\015\142\001\002\000\042\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\015\uffc0\017\uffc0" +
    "\022\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\001\002\000\010\014\057\040\051\041\050\001\002" +
    "\000\006\015\uffbd\022\uffbd\001\002\000\010\014\057\040" +
    "\051\041\050\001\002\000\004\015\147\001\002\000\024" +
    "\012\042\014\057\020\032\023\047\026\043\027\066\030" +
    "\044\040\051\041\050\001\002\000\030\012\uffe4\014\uffe4" +
    "\020\uffe4\021\uffe4\023\uffe4\025\151\026\uffe4\027\uffe4\030" +
    "\uffe4\040\uffe4\041\uffe4\001\002\000\024\012\042\014\057" +
    "\020\032\023\047\026\043\027\066\030\044\040\051\041" +
    "\050\001\002\000\030\012\uffe3\014\uffe3\020\uffe3\021\uffe3" +
    "\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\040\uffe3\041" +
    "\uffe3\001\002\000\030\012\uffde\014\uffde\020\uffde\021\uffde" +
    "\023\uffde\025\uffde\026\uffde\027\uffde\030\uffde\040\uffde\041" +
    "\uffde\001\002\000\004\012\155\001\002\000\030\012\uffdd" +
    "\014\uffdd\020\uffdd\021\uffdd\023\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\040\uffdd\041\uffdd\001\002\000\010\014\057" +
    "\040\051\041\050\001\002\000\004\015\160\001\002\000" +
    "\024\012\042\014\057\020\032\023\047\026\043\027\066" +
    "\030\044\040\051\041\050\001\002\000\030\012\uffe0\014" +
    "\uffe0\020\uffe0\021\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\040\uffe0\041\uffe0\001\002\000\010\015\ufff2\016" +
    "\163\022\ufff2\001\002\000\004\017\164\001\002\000\006" +
    "\015\ufff1\022\ufff1\001\002\000\006\024\010\031\013\001" +
    "\002\000\006\015\ufff4\022\ufff4\001\002\000\010\002\uffff" +
    "\024\uffff\031\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\016\002\003\003\006\004\011\005\005\006" +
    "\004\036\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\166\005\005\006\004\036" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\025\010\022\011\026\036\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\030\001\001\000\002\001\001\000\004\013\032\001\001" +
    "\000\010\005\034\014\033\036\035\001\001\000\042\012" +
    "\044\015\040\016\061\017\062\020\063\021\037\022\064" +
    "\023\053\024\045\025\066\030\052\031\067\032\060\033" +
    "\055\034\057\035\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\024\045" +
    "\025\066\030\153\031\067\032\060\033\055\034\057\035" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\111" +
    "\001\001\000\006\037\122\041\121\001\001\000\022\024" +
    "\045\025\066\030\113\031\067\032\060\033\055\034\057" +
    "\035\054\001\001\000\004\040\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\024\045\025\066\030\071\031\067" +
    "\032\060\033\055\034\057\035\054\001\001\000\002\001" +
    "\001\000\022\024\045\025\066\030\073\031\067\032\060" +
    "\033\055\034\057\035\054\001\001\000\002\001\001\000" +
    "\022\024\045\025\066\030\075\031\067\032\060\033\055" +
    "\034\057\035\054\001\001\000\002\001\001\000\022\024" +
    "\045\025\066\030\077\031\067\032\060\033\055\034\057" +
    "\035\054\001\001\000\002\001\001\000\042\012\044\015" +
    "\101\016\061\017\062\020\063\021\037\022\064\023\053" +
    "\024\045\025\066\030\052\031\067\032\060\033\055\034" +
    "\057\035\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\045\025\066\031\105\035\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\112\025" +
    "\066\031\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\045\025\066" +
    "\031\105\033\130\034\057\035\054\001\001\000\014\024" +
    "\045\025\066\031\105\034\127\035\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\103\001\001\000\004\037\122\001\001" +
    "\000\002\001\001\000\026\024\045\025\066\026\140\027" +
    "\136\030\137\031\067\032\060\033\055\034\057\035\054" +
    "\001\001\000\022\024\045\025\066\030\134\031\067\032" +
    "\060\033\055\034\057\035\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\024\045\025\066" +
    "\030\143\031\067\032\060\033\055\034\057\035\054\001" +
    "\001\000\002\001\001\000\022\024\045\025\066\030\145" +
    "\031\067\032\060\033\055\034\057\035\054\001\001\000" +
    "\002\001\001\000\042\012\044\015\147\016\061\017\062" +
    "\020\063\021\037\022\064\023\053\024\045\025\066\030" +
    "\052\031\067\032\060\033\055\034\057\035\054\001\001" +
    "\000\002\001\001\000\042\012\044\015\151\016\061\017" +
    "\062\020\063\021\037\022\064\023\053\024\045\025\066" +
    "\030\052\031\067\032\060\033\055\034\057\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\024\045\025\066\030\156\031" +
    "\067\032\060\033\055\034\057\035\054\001\001\000\002" +
    "\001\001\000\042\012\044\015\160\016\061\017\062\020" +
    "\063\021\037\022\064\023\053\024\045\025\066\030\052" +
    "\031\067\032\060\033\055\034\057\035\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\165\036\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* AST root. */
    public Node root = null; //Raiz del arbol.
 	public String producciones = ""; //Concatenacion de las producciones.
	
	public void syntax_error(Symbol cur_token)    {
		System.out.println("Hay error de sintaxis.");
		report_error("Error de sintaxis", null);
	}
        
        public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message + " -> Parser");
        System.err.println(m);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arg_list ::= expression 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "  algo\n";
            RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arg_list ::= arg_list COMMA expression 
            {
              Node RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node al = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "algo  \n";
            RESULT = e;
            e.setHermano(al);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= 
            {
              Node RESULT =null;
		
            this.parser.producciones += " algo \n";
            RESULT = null;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= arg_list 
            {
              Node RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node al = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "algo  \n";
            RESULT = al;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // call ::= ID PRI args PRD 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            this.parser.producciones += "call::=  ID ( args ) \n";
            RESULT = new CallFunction(id,a);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= NUM 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "exp::= NUM  \n";
            RESULT = new ExprConst(n);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= call 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += " exp::= call \n";
            RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= var 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += " exp::= var \n";
            RESULT = v;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= PRI expression PRD 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            this.parser.producciones += " exp::= ( expression)  \n";
            RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // powop ::= EXP2 
            {
              Integer RESULT =null;
		
            this.parser.producciones += "powop::= EXP2  \n";
            RESULT = sym.EXP2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("powop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // powop ::= EXP1 
            {
              Integer RESULT =null;
		
            this.parser.producciones += "powop::= EXP1  \n";
            RESULT = sym.EXP1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("powop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= exp 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            this.parser.producciones += "factor::= exp:e\n";
            RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= factor powop exp 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       
            this.parser.producciones += "factor::= factor powop exp \n";
            RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mulop ::= DIV 
            {
              Integer RESULT =null;
		     
            this.parser.producciones += "mulop::= DIV \n";
            RESULT = sym.DIV;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mulop ::= MULT 
            {
              Integer RESULT =null;
		  
            this.parser.producciones += "mulop::= MULT \n";
            RESULT = sym.MULT;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "term::= factor:f \n";
            RESULT = f;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term mulop factor 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "term::=  term mulop factor  \n";
            RESULT = new ExprBynary(t,m,f);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // addop ::= RESTA 
            {
              Integer RESULT =null;
		  
            this.parser.producciones += "addop::= RESTA   \n";
            RESULT = sym.RESTA;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // addop ::= SUMA 
            {
              Integer RESULT =null;
		
            this.parser.producciones += "addop::= SUMA  \n";
            RESULT = sym.SUMA;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= term 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "additive_expression::= term \n";
            RESULT = t;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additive_expression ::= additive_expression addop term 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer ad = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            this.parser.producciones += "additive_expression::= additive_expression addop term   \n";
            RESULT = new ExprBynary(ae,ad,t);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relop ::= NEQ 
            {
              Integer RESULT =null;
		    
            this.parser.producciones += "relop::= NEQ \n";
            RESULT = sym.NEQ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relop ::= EQ 
            {
              Integer RESULT =null;
		
            this.parser.producciones += "relop::= EQ \n";
            RESULT = sym.EQ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relop ::= GEQ 
            {
              Integer RESULT =null;
		
            this.parser.producciones += "relop::= GEQ\n";
            RESULT = sym.GEQ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= GT 
            {
              Integer RESULT =null;
		    
            this.parser.producciones += "relop::= GT\n";
            RESULT = sym.GT;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= LT 
            {
              Integer RESULT =null;
		  
            this.parser.producciones += "relop::= LT \n";
            RESULT = sym.LT;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relop ::= LEQ 
            {
              Integer RESULT =null;
		   
            this.parser.producciones += "relop::= LEQ  \n";
            RESULT = sym.LEQ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_expression ::= additive_expression 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "simple_expression::= additive_expression\n";
            RESULT = ae;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_expression ::= additive_expression relop additive_expression 
            {
              Node RESULT =null;
		int ae1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ae1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ae1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ae2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ae2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ae2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		         
            this.parser.producciones += "simple_expression::= additive_expression relop:r additive_expression \n";
            RESULT = new ExprBynary(ae1,r,ae2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= ID PCI expression PCD 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            this.parser.producciones += "var::= ID [ expression ] \n";
            RESULT = new ExprVar(e,id,true);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "var::= ID  \n";
            RESULT = new ExprVar(null,id,false);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= simple_expression 
            {
              Node RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node se = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "expression::= simple_expression  \n";
            RESULT = se;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= var ASIGN expression 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            this.parser.producciones += "expression::= var ::= expression  \n";
            RESULT = new ExprAsign(v,e,sym.ASIGN);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_stmt ::= RETURN expression PCOMMA 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            this.parser.producciones += "return_stmt::= RETURN expression;   \n";
            RESULT = new return_stmt(e);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_stmt ::= RETURN PCOMMA 
            {
              Node RESULT =null;
		 
            this.parser.producciones += "return_stmt::= RETURN;\n";
            RESULT = new return_stmt(null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_stmt ::= FOR PRI expression COMMA expression COMMA expression PRD statement 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "for_stmt::=  FOR ( expression , expression , expression ) statement \n";
            System.out.println(this.parser.producciones);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // while_stmt ::= WHILE PRI expression PRD statement 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            this.parser.producciones += "while_stmt::= WHILE ( expression) statement  \n";
            RESULT = new WhileStmt(e,s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteration_stmt ::= for_stmt 
            {
              Node RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fs = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      
            this.parser.producciones += "iteration_stmt::= for_stmt  \n";
            RESULT = fs;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iteration_stmt ::= while_stmt 
            {
              Node RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ws = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		         
            this.parser.producciones += "iteration_stmt::=  while_stmt  \n";
            RESULT = ws;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_stmt ::= IF PRI expression PRD statement ELSE statement 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node s1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node s2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    
            this.parser.producciones += "selection_stmt::= IF (expression) statement ELSE statement\n";
            RESULT = new selection_stmt(e,s1,s2,true);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // selection_stmt ::= IF PRI expression PRD statement 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += " selection_stmt::= IF ( expression ) statement\n";
            RESULT = new selection_stmt(e,s,null,false);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_stmt ::= PCOMMA 
            {
              Node RESULT =null;
		
            this.parser.producciones += "expression_stmt::= ;  \n";
            RESULT = new Empty_Stmt();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression_stmt ::= expression PCOMMA 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            
            this.parser.producciones += "expression_stmt::= expression ; \n";
            RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= return_stmt 
            {
              Node RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node rs = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            this.parser.producciones += "statement::= return_stmt: \n";
            RESULT = rs;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= iteration_stmt 
            {
              Node RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node is = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            this.parser.producciones += "statement::= iteration_stmt \n";
            RESULT = is;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= selection_stmt 
            {
              Node RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ss = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            this.parser.producciones += "statement::= selection_stmt \n";
            RESULT = ss;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= compound_stmt 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cs = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
            this.parser.producciones += "statement::= compound_stmt  \n";
            RESULT = cs;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= expression_stmt 
            {
              Node RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node es = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		          
            this.parser.producciones += "statement::= expression_stmt  \n";
            RESULT = es;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= 
            {
              Node RESULT =null;
		
            this.parser.producciones += " EMPTY \n";
            RESULT = null; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement_list statement 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       
            this.parser.producciones += "statement_list::= statement_list statement \n";
            RESULT = s;
            s.setHermano(sl);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= 
            {
              Node RESULT =null;
		
            this.parser.producciones += "  EMPTY\n";
            RESULT = null;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_declarations ::= local_declarations var_declaration 
            {
              Node RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ld = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		         
            this.parser.producciones += "local_declarations::= local_declarations var_declaration \n";
            RESULT = vd;
            vd.setHermano(ld);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compound_stmt ::= LLI local_declarations statement_list LLD 
            {
              Node RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ld = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		        
            this.parser.producciones += " compound_stmt::= { local_declarations statement_list }   \n";
            RESULT = new compound_stmt(ld,sl);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_specifier ID PCI PCD 
            {
              Node RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		       
            this.parser.producciones += "param::= type_specifier ID [ ] \n";
            RESULT = new Param(ts,id,true);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= type_specifier ID 
            {
              Node RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       
            this.parser.producciones += " param::= type_specifier ID \n";
            RESULT = new Param(ts,id,false);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		          
            this.parser.producciones += "param_list::= param  \n";
            RESULT = p;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param_list COMMA param 
            {
              Node RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node pl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
            this.parser.producciones += "param_list::= param_list , param   \n";
            RESULT = p;
            p.setHermano(pl);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= VOID 
            {
              Node RESULT =null;
		
            this.parser.producciones += "params::= VOID \n";
            RESULT: new Param(sym.VOID,null,false);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= param_list 
            {
              Node RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node pl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		         
            this.parser.producciones += "params::= param_list \n";
            RESULT=pl;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fun_declaration ::= type_specifier ID PRI params PRD compound_stmt 
            {
              Node RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cs = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      
            this.parser.producciones += "fun_declaration::= type_specifier ID ( params ) compound_stmt \n";
            RESULT = new fun_declaration(ts,id,p,cs);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= VOID 
            {
              Integer RESULT =null;
		
            this.parser.producciones += "type_specifier::= VOID \n";
            RESULT= sym.VOID;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= INT 
            {
              Integer RESULT =null;
		
            this.parser.producciones += "type_specifier::= INT \n";
            RESULT = sym.INT;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_declaration ::= type_specifier ID PCI NUM PCD PCOMMA 
            {
              Node RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            this.parser.producciones += "var_declaration::=type_specifier ID [ NUM ];\n";
            RESULT = new var_declaration(ts,id,true,num);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= type_specifier ID PCOMMA 
            {
              Node RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		           
            this.parser.producciones += "var_declaration::= type_specifier ID ; \n";
            RESULT = new var_declaration(ts,id,false,null); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= fun_declaration 
            {
              Node RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            this.parser.producciones += "declaration ::= fun_declaration \n";
            RESULT = fd;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= var_declaration 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    
            this.parser.producciones += "declaration ::= var_declaration\n";
            RESULT = vd;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            this.parser.producciones += "declaration_list ::= declaration \n";
            RESULT = d;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              Node RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
            this.parser.producciones += "declaration_list::= declaration_list declaration \n";
            RESULT = this.parser.root;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              Node RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				this.parser.root = new Program(dl);				
				this.parser.producciones += "program::== declaration_list\n";
                                System.out.println(this.parser.producciones);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

